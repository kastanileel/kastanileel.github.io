vec4 nPlane= vec4(0, 1., 0., 2.2);
float sdfPlane( vec3 p, vec4 n ){

  const int num_waves = 6;  // Increased the number of waves

// Modified frequencies and amplitudes for sine waves

  // Wave direction
  vec2 waveDirection = normalize(vec2(sin(6.) + 1., cos(6.)+1.)); // Normalized diagonal direction



  float result = 0.0;
    for(int i = 0; i < 6; i++) {
        float freq = 0.;
        float ampli = 0.0;
        if(i == 0) {
                    freq = .2;
                    ampli = .6;
        }
        if(i == 1) {
                    freq = .3;
                    ampli = .4;
                }
if(i == 2) {
            freq = .5;
            ampli = .3;
        }
        if(i == 3) {
            freq = .7;
            ampli = .1;
        }
        if(i == 4) {
            freq = 1.;
            ampli = .004;
        }
        if(i == 5) {
            freq = 2.;
            ampli = .001;
        }





        vec2 waveFront = freq * vec2(p.x * waveDirection.x, p.z * waveDirection.y) + iTime;
        result += ampli * (sin(2.*waveFront.x)  + sin(2. * waveFront.y)*2.) *.5;
    }



  return dot(p,normalize(n.xyz)) + n.w + result;
}

float sdfPlane(vec3 p){



  return sdfPlane(p, nPlane);
}

float sdfCircle(vec2 p){

    float radius = .4;
    vec2 center = vec2(.0, .5);

    return length(p-center) - radius;

}


vec3 getNormalWave(vec3 p){

  vec2 offset = vec2(0.001, 0);

  float gradX = sdfPlane(p + offset.xyy) - sdfPlane(p - offset.xyy);
  float gradY = sdfPlane(p + offset.yxy) - sdfPlane(p - offset.yxy);
  float gradZ = sdfPlane(p + offset.yyx) - sdfPlane(p - offset.yyx);

  return normalize(vec3(gradX, gradY, gradZ));

}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    uv -= vec2(.515, .3);
    uv *= 2.;
    uv.x *= iResolution.x/iResolution.y;


    vec3 lightRay = normalize(vec3(0., 0.5, -.2));
    vec3 waterCol = vec3(.1, .2, .8);


    // Time varying pixel color
    vec3 col = vec3(.0);
    vec3 fog = vec3(.0);

     //origin of rays
    const vec3 ro = vec3(0., .7, 8.);
    //normalized direction of rays
    vec3 rd = normalize(vec3(uv, 0.) - ro);
    float fogFactor;
    float totalMarchedDist = .0;
    bool hit = false;
    float l;
    for(int i = 0; i< 200; i ++){

        float it = float(i);
        vec3 rayPos = ro + (totalMarchedDist + 0.001 * it *it )* rd;

        float dist = sdfPlane(rayPos, nPlane);
        totalMarchedDist += dist;

        if(dist < .001){

            col = vec3(0.);

            vec3 normal = getNormalWave(rayPos);
            float diffuseLight = dot(normal, lightRay);
            float specularLight = dot(reflect(lightRay,normal), normalize(rayPos - ro));
            specularLight = pow(specularLight, 1.);
            specularLight = max(specularLight, 0.);
            diffuseLight = max(diffuseLight, 0.);
            float ambientLight = 0.;

            diffuseLight *= .3;
            specularLight *= .9;

            float light =  min(diffuseLight+specularLight, 1.2) + ambientLight;


            //waterCol = light* waterCol;
            col = light*vec3(1.);
            //col = normal;
            col=waterCol * light;
            hit = true;

            if(totalMarchedDist > 160.)
                hit = false;

            l = light;

            break;
        }

    hit = false;

    fogFactor = pow(0.0115 *length(rayPos - ro), 2.8);
    fog = vec3(fogFactor, fogFactor, fogFactor);

    }
   // col = mix(waterCol,waterCol, .7);
     // Output to screen
    fragColor = vec4(mix(col ,vec3(1., (uv.y * uv.y)/1.1, .0) *l,fogFactor) ,1.0);
    //fragColor = vec4(vec3(.0), 1.);
    if(!hit){

        float moon = sdfCircle(uv);
        float d = sdfCircle(uv);
        //d = abs(d);
        d = max(0., d);

        d = smoothstep(d,0.0, 0.05);
        //d = 0.05/d;

        d = 1.0-d;


        vec4 skyCol = vec4(mix(vec3(.1, .1, 1.), vec3(1., .2, 0.1), 1. - (2.*uv.y) + 1.2),.5);
        vec3 newCol = mix(vec3(1., (uv.y * uv.y)/.9, .1), skyCol.xyz,1.-d);
        fragColor = vec4(newCol, 1.);

      }



}